{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _EventSpy = _interopRequireDefault(require(\"../EventSpy\"));\n\nvar _FunctionContext = _interopRequireDefault(require(\"./FunctionContext\"));\n\nvar _InternalContext = _interopRequireDefault(require(\"./InternalContext\"));\n\nvar _SpineTo = _interopRequireDefault(require(\"../SpineTo\"));\n\nvar _StateContext = _interopRequireDefault(require(\"./StateContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.stateContext.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === 'top' ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: !atEnd,\n    atTop: atTop\n  };\n}\n\nvar Composer = /*#__PURE__*/function (_React$Component) {\n  _inherits(Composer, _React$Component);\n\n  function Composer(props) {\n    var _this;\n\n    _classCallCheck(this, Composer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Composer).call(this, props));\n    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleScrollEnd = _this.handleScrollEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._ignoreScrollEventBefore = 0;\n    _this.state = {\n      functionContext: {\n        scrollTo: function scrollTo(scrollTop) {\n          return _this.setState(function (_ref2) {\n            var stateContext = _ref2.stateContext;\n            return {\n              scrollTop: scrollTop,\n              stateContext: (0, _simpleUpdateIn.default)(stateContext, ['animating'], function () {\n                return true;\n              })\n            };\n          });\n        },\n        scrollToBottom: function scrollToBottom() {\n          return _this.state.functionContext.scrollTo('100%');\n        },\n        scrollToEnd: function scrollToEnd() {\n          var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n              _assertThisInitialize2 = _assertThisInitialize.state,\n              functionContext = _assertThisInitialize2.functionContext,\n              stateContext = _assertThisInitialize2.stateContext;\n\n          stateContext.mode === 'top' ? functionContext.scrollToTop() : functionContext.scrollToBottom();\n        },\n        scrollToStart: function scrollToStart() {\n          var _assertThisInitialize3 = _assertThisInitialized(_assertThisInitialized(_this)),\n              _assertThisInitialize4 = _assertThisInitialize3.state,\n              functionContext = _assertThisInitialize4.functionContext,\n              stateContext = _assertThisInitialize4.stateContext;\n\n          stateContext.mode === 'top' ? functionContext.scrollToBottom() : functionContext.scrollToTop();\n        },\n        scrollToTop: function scrollToTop() {\n          return _this.state.functionContext.scrollTo(0);\n        }\n      },\n      internalContext: {\n        offsetHeight: 0,\n        scrollHeight: 0,\n        setTarget: function setTarget(target) {\n          return _this.setState(function () {\n            return {\n              target: target\n            };\n          });\n        }\n      },\n      scrollTop: props.mode === 'top' ? 0 : '100%',\n      stateContext: {\n        animating: false,\n        atBottom: true,\n        atEnd: true,\n        atTop: true,\n        mode: props.mode,\n        sticky: true\n      },\n      target: null\n    };\n    return _this;\n  }\n\n  _createClass(Composer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.enableWorker();\n    }\n  }, {\n    key: \"disableWorker\",\n    value: function disableWorker() {\n      clearInterval(this._stickyCheckTimeout);\n    }\n  }, {\n    key: \"enableWorker\",\n    value: function enableWorker() {\n      var _this2 = this;\n\n      clearInterval(this._stickyCheckTimeout);\n      var stickyButNotAtEndSince = false;\n      this._stickyCheckTimeout = setImmediateInterval(function () {\n        var state = _this2.state;\n        var sticky = state.stateContext.sticky,\n            target = state.target;\n\n        if (sticky && target && !computeViewState(state).atEnd) {\n          if (!stickyButNotAtEndSince) {\n            stickyButNotAtEndSince = Date.now();\n          } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n            // Quirks: In Firefox, after user scroll down, Firefox do two things:\n            //         1. Set to a new \"scrollTop\"\n            //         2. Fire \"scroll\" event\n            //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n            //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n            // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n            state.functionContext.scrollToEnd();\n            stickyButNotAtEndSince = false;\n          }\n        } else {\n          stickyButNotAtEndSince = false;\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, this.props.checkInterval) || MIN_CHECK_INTERVAL);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.disableWorker();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState(function (_ref3) {\n        var stateContext = _ref3.stateContext;\n        return {\n          stateContext: _objectSpread({}, stateContext, {\n            mode: nextProps.mode === 'top' ? 'top' : 'bottom'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"handleScroll\",\n    value: function handleScroll(_ref4) {\n      var _this3 = this;\n\n      var timeStampLow = _ref4.timeStampLow; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n      // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n      if (timeStampLow <= this._ignoreScrollEventBefore) {\n        // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n        // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n        return;\n      }\n\n      this.disableWorker();\n      this.setState(function (state) {\n        var target = state.target;\n\n        if (target) {\n          var internalContext = state.internalContext,\n              scrollTop = state.scrollTop,\n              stateContext = state.stateContext;\n\n          var _computeViewState = computeViewState(state),\n              atBottom = _computeViewState.atBottom,\n              atEnd = _computeViewState.atEnd,\n              atStart = _computeViewState.atStart,\n              atTop = _computeViewState.atTop;\n\n          var nextInternalContext = internalContext;\n          var nextStateContext = stateContext;\n          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atBottom'], function () {\n            return atBottom;\n          });\n          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atEnd'], function () {\n            return atEnd;\n          });\n          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atStart'], function () {\n            return atStart;\n          });\n          nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['atTop'], function () {\n            return atTop;\n          }); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n          // We need to ignore these \"synthetic\" events\n          // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n          //        Nomatter how fast or slow the sequence is being presssed, it should still stick to the bottom\n\n          var offsetHeight = target.offsetHeight,\n              scrollHeight = target.scrollHeight;\n          var resized = offsetHeight !== internalContext.offsetHeight;\n          var elementChanged = scrollHeight !== internalContext.scrollHeight;\n\n          if (resized) {\n            nextInternalContext = (0, _simpleUpdateIn.default)(nextInternalContext, ['offsetHeight'], function () {\n              return offsetHeight;\n            });\n          }\n\n          if (elementChanged) {\n            nextInternalContext = (0, _simpleUpdateIn.default)(nextInternalContext, ['scrollHeight'], function () {\n              return scrollHeight;\n            });\n          } // Sticky means:\n          // - If it is scrolled programatically, we are still in sticky mode\n          // - If it is scrolled by the user, then sticky means if we are at the end\n          // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n\n          if (!resized && !elementChanged) {\n            nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['sticky'], function () {\n              return stateContext.animating ? true : atEnd;\n            });\n          } // If no scrollTop is set (not in programmatic scrolling mode), we should set \"animating\" to false\n          // \"animating\" is used to calculate the \"sticky\" property\n\n\n          if (scrollTop === null) {\n            nextStateContext = (0, _simpleUpdateIn.default)(nextStateContext, ['animating'], function () {\n              return false;\n            });\n          }\n\n          return _objectSpread({}, internalContext === nextInternalContext ? {} : {\n            internalContext: nextInternalContext\n          }, stateContext === nextStateContext ? {} : {\n            stateContext: nextStateContext\n          });\n        }\n      }, function () {\n        _this3.state.stateContext.sticky && _this3.enableWorker();\n      });\n    }\n  }, {\n    key: \"handleScrollEnd\",\n    value: function handleScrollEnd() {\n      // We should ignore debouncing handleScroll that emit before this time\n      this._ignoreScrollEventBefore = Date.now();\n      this.setState(function () {\n        return {\n          scrollTop: null\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var handleScroll = this.handleScroll,\n          handleScrollEnd = this.handleScrollEnd,\n          _this$props = this.props,\n          children = _this$props.children,\n          debounce = _this$props.debounce,\n          _this$state = this.state,\n          functionContext = _this$state.functionContext,\n          internalContext = _this$state.internalContext,\n          scrollTop = _this$state.scrollTop,\n          stateContext = _this$state.stateContext,\n          target = _this$state.target;\n      return _react.default.createElement(_InternalContext.default.Provider, {\n        value: internalContext\n      }, _react.default.createElement(_FunctionContext.default.Provider, {\n        value: functionContext\n      }, _react.default.createElement(_StateContext.default.Provider, {\n        value: stateContext\n      }, children, target && _react.default.createElement(_EventSpy.default, {\n        debounce: debounce,\n        name: \"scroll\",\n        onEvent: handleScroll,\n        target: target\n      }), target && scrollTop !== null && _react.default.createElement(_SpineTo.default, {\n        name: \"scrollTop\",\n        onEnd: handleScrollEnd,\n        target: target,\n        value: scrollTop\n      }))));\n    }\n  }]);\n\n  return Composer;\n}(_react.default.Component);\n\nexports.default = Composer;\nComposer.defaultProps = {\n  checkInterval: 100,\n  debounce: 17\n};\nComposer.propTypes = {\n  checkInterval: _propTypes.default.number,\n  debounce: _propTypes.default.number\n};","map":null,"metadata":{},"sourceType":"script"}