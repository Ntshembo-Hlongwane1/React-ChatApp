{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setIn;\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction setIn(obj, path, updater) {\n  if (!Array.isArray(path)) {\n    throw new Error('path must be an array');\n  }\n\n  if (!path.length) {\n    return updater(obj);\n  }\n\n  path = path.slice();\n  var accessor = path.shift();\n\n  if (typeof accessor === 'function') {\n    if (Array.isArray(obj)) {\n      obj.forEach(function (value, index) {\n        if (accessor.call(obj, value, index)) {\n          obj = setIn(obj, [index].concat(_toConsumableArray(path)), updater);\n        }\n      });\n    } else if (obj) {\n      Object.keys(obj).forEach(function (key) {\n        if (accessor.call(obj, obj[key], key)) {\n          obj = setIn(obj, [key].concat(_toConsumableArray(path)), updater);\n        }\n      });\n    }\n\n    return obj;\n  }\n\n  var value = typeof obj !== 'undefined' && obj[accessor];\n  var nextObj = obj;\n\n  if (typeof accessor === 'string' && (_typeof(nextObj) !== 'object' || Array.isArray(nextObj))) {\n    nextObj = {};\n  } else if (typeof accessor === 'number' && !Array.isArray(nextObj)) {\n    nextObj = [];\n  }\n\n  if (typeof accessor === 'number') {\n    if (updater || path.length) {\n      if (accessor === -1) {\n        return _toConsumableArray(nextObj).concat([setIn([], path, updater)]);\n      }\n\n      var nextValue = setIn(value, path, updater);\n\n      if (typeof nextValue !== 'undefined') {\n        if (nextValue === value) {\n          return obj;\n        } else {\n          nextObj = _toConsumableArray(nextObj);\n          nextObj[accessor] = nextValue;\n          return nextObj;\n        }\n      }\n    } // If updater returned undefined or no updater at all, delete the item\n\n\n    if (accessor in nextObj) {\n      nextObj = _toConsumableArray(nextObj);\n      nextObj.splice(accessor, 1);\n    }\n\n    return nextObj;\n  } else {\n    if (updater || path.length) {\n      var _nextValue = setIn(value, path, updater);\n\n      if (typeof _nextValue !== 'undefined') {\n        if (_nextValue === value) {\n          return obj;\n        } else {\n          return _objectSpread({}, nextObj, _defineProperty({}, accessor, _nextValue));\n        }\n      }\n    } // If updater returned undefined or no updater at all, delete the key\n\n\n    if (accessor in nextObj) {\n      nextObj = _objectSpread({}, nextObj);\n      delete nextObj[accessor];\n    }\n\n    return nextObj;\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":null,"metadata":{},"sourceType":"script"}